{"version":3,"file":"static/js/4136.eddd642f.chunk.js","mappings":"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","sources":["views/group/list/list.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCardImage,\n  CCardText,\n  CCardTitle,\n  CListGroup,\n  CListGroupItem,\n  CCol,\n  CRow,\n  CButtonGroup,\n  CInputGroup,\n  CInputGroupText,\n  CFormInput,\n  CPagination,\n  CPaginationItem,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CFormLabel,\n} from '@coreui/react'\n\nimport ReactImg_2 from 'src/assets/images/test5.jpeg';\nimport axios from 'axios';\nimport usePromise from 'src/lib/usePromise';\nimport apiConfig from 'src/lib/apiConfig.js';\n\nconst ClickParticipateBtn = () => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CButton color=\"success\" variant=\"outline\" onClick={() => setVisible(!visible)}>\n        participate\n      </CButton>\n      <CModal visible={visible} onClose={() => setVisible(false)}>\n        <CModalHeader>\n          <CModalTitle>그룹 참여 요청</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <CRow className=\"mb-3\">\n            <CFormLabel htmlFor=\"groupCode\" className=\"col-sm-2 col-form-label\">\n              그룹코드\n            </CFormLabel>\n            <div className=\"col-sm-10\">\n              <CFormInput type=\"password\" id=\"groupCode\" placeholder=\"그룹코드\" />\n            </div>\n          </CRow>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"primary\" variant=\"outline\">\n            participate\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nconst Grouplist = () => {\n  const current = decodeURI(window.location.href);\n  const search = current.split(\"?\")[1];\n  const params = new URLSearchParams(search);\n  const nowPage = params.get('page') ? params.get('page') : 1;\n\n  //user 정보 불러오기\n  const { user } = useSelector(({user})=> ({user:user.user}));\n\n  const loginUser = user.info.userId;\n\n  //token 가져오기\n  const accessToken = user.token.access_token;\n\n\n  // groupList 정보 가져오기 (usePromise && post)\n\n  // let pageData= {\n  //   totalPage: 0,\n  //   page: 1,\n  //   size: 0,\n  //   start: 0,\n  //   end: 0,\n  //   prev: false,\n  //   next: false,\n  //   pageList: []\n  // };\n\n  // const [pageData, setPageData] = useState({\n  //   totalPage: 0,\n  //   page: 1,\n  //   size: 0,\n  //   start: 0,\n  //   end: 0,\n  //   prev: false,\n  //   next: false,\n  //   pageList: []\n  // })\n\n  // const [groupList, setGroupList] = useState([])\n\n  // const [loading, response, error] = usePromise(() => {\n  //   return axios.post(apiConfig.groupList,\n  //   {},\n      // const headers = {\n      //   'Content-Type' : 'application/json',\n      //   'Authorization': 'Bearer ' + accessToken\n      // }\n  //{headers: {'Authorization': 'Bearer ' + accessToken }}) // token 서버로 보내기\n  // }, []);\n\n  // if(response != null) {\n  //   groupList = response.data.dtoList;\n  //   pageData.pageList = response.data.pageList;\n  //   pageData.page = response.data.page;\n  // }\n\n  ///------\n\n  const [pageData, setPageData] = useState({\n    totalPage: 0,\n    page: 1,\n    size: 0,\n    start: 0,\n    end: 0,\n    prev: false,\n    next: false,\n    pageList: []\n  })\n\n  const [groupList, setGroupList] = useState([])\n\n  axios.post(`${apiConfig.groupList}?page=${nowPage}`)\n    .then((response)=> {\n      setPageData(pageData => ({...pageData, ...response.data, page: nowPage}))\n      setGroupList(response.data.dtoList)\n\n    })\n\n  // useState && get\n  // const pageData = useState({\n  //   totalPage: 0,\n  //   page: 1,\n  //   size: 0,\n  //   start: 0,\n  //   end: 0,\n  //   prev: false,\n  //   next: false,\n  //   pageList: []\n  // })\n\n  // const [groupList, setGroupList] = useState([])\n\n  // useState(async () => {\n  //   await axios.post(apiConfig.groupList + \"?page=\" + nowPage)\n  //     .then((response) => {\n  //       console.log(response.data)\n  //       setPageData(pageData => ({...pageData, ...response.data, page: nowPage}))\n  //       setCategoryList(response.data.dtoList)\n  //     })\n  // })\n\n  //그룹 삭제 api 호출\n  const deleteGroup = (groupId) => {\n    axios.post(apiConfig.groupDelete,\n    {\"groupId\" : groupId},\n    {\n      headers: { \"Content-Type\": \"multipart/form-data\" }\n    }).then((response) => {\n      console.log(\"삭제 완료\")\n    }).catch((error) => {\n      //console.log(error);\n    })\n  }\n\n  // 그룹 참여 api 호출\n  const prtcpGroup = (groupId, userId) => {\n    axios.post(apiConfig.groupPrtcp,\n      {\"groupId\" : groupId,\n            \"userId\" : userId},\n      {\n        headers: { \"Content-Type\": \"multipart/form-data\" }\n      }).then((response) => {\n      console.log(\"참여 완료\")\n    }).catch((error) => {\n      //console.log(error);\n    })\n  }\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong> 그룹 목록 </strong>\n          </CCardHeader>\n          <CCardBody>\n            <CCard className=\"mb-2\">\n              <CCardBody>\n                <CCol lg={12}>\n                  <CRow>\n                    <CInputGroup className=\"mb-1\" lg={6}>\n                      <CInputGroupText id=\"basic-addon1\">개설자</CInputGroupText>\n                      <CFormInput\n                        placeholder=\"\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-1\" lg={6}>\n                      <CInputGroupText id=\"basic-addon1\">그룹명</CInputGroupText>\n                      <CFormInput\n                        placeholder=\"\"\n                        aria-label=\"Groupname\"\n                        aria-describedby=\"basic-addon1\"\n                      />\n                    </CInputGroup>\n                  </CRow>\n                </CCol>\n                <CCol lg={12} className=\"text-end\">\n                  <CButton color=\"primary\" type='submit'>\n                    Search\n                  </CButton>\n                </CCol>\n              </CCardBody>\n            </CCard>\n            <CRow className=\"mb-4\">\n              {groupList.map((groupList)=> (\n                <CCol lg={3} key = {groupList.groupId}>\n                <CCard className=\"mb-3\">\n                  <CCardImage orientation=\"top\" src={ReactImg_2} />\n                  <CCardBody>\n                    <CCardTitle>{groupList.groupName}</CCardTitle>\n                    <CCardText className=\"text-ellipsis\">\n                    {groupList.groupDescription}\n                    </CCardText>\n                  </CCardBody>\n                  <CListGroup flush>\n                    <CListGroupItem>개설자 : {groupList.regId}</CListGroupItem>\n                    <CListGroupItem>참여인원 : {groupList.groupCnt}명</CListGroupItem>\n                  </CListGroup>\n                  <CCardBody className=\"text-end\">\n                    <CButtonGroup>\n                    {groupList.isParticipated === \"N\" &&(\n                      <CButton color=\"success\" variant=\"outline\" size=\"sm\" onClick={(e) => {prtcpGroup(groupList.groupId, loginUser)}}>participate</CButton>\n                    )}\n                    {groupList.isParticipated === \"Y\" && (\n                      <CButton color=\"primary\" href={'#/group/detail/'+groupList.groupId} variant=\"outline\" size=\"sm\">detail</CButton>\n                    )}\n                    {groupList.isCreated === \"Y\" && (\n                      <CButton color=\"primary\" href={'#/group/detail/'+groupList.groupId} variant=\"outline\" size=\"sm\">detail</CButton>\n                    )}\n                    {groupList.isCreated === \"Y\" && (\n                      <CButton color=\"danger\" variant=\"outline\" size=\"sm\" onClick={(e) => {deleteGroup(groupList.groupId)}}>delete</CButton>\n                    )}\n                    </CButtonGroup>\n                  </CCardBody>\n                  <CCardFooter>\n                    <small className=\"text-medium-emphasis\">생성일 : {groupList.regDt}</small>\n                  </CCardFooter>\n                </CCard>\n              </CCol>\n              )\n              )}\n            </CRow>\n            <CRow className=\"mb-4\">\n              <CPagination aria-label=\"Page navigation example\" align=\"center\">\n                {pageData.prev ? (\n                  <CPaginationItem aria-label=\"Previous\">\n                    <span aria-hidden=\"true\">\n                      <a href={\"/#/group/list?page=\" + String(parseInt(pageData.start) - 1)}>&laquo;</a>\n                    </span>\n                  </CPaginationItem>\n                ) : (\n                  <CPaginationItem aria-label=\"Previous\" disabled>\n                    <span aria-hidden=\"true\">&laquo;</span>\n                  </CPaginationItem>\n                )}\n                {pageData.pageList.map((idx) =>\n                  idx === parseInt(pageData.page) ?(\n                    <CPaginationItem active key={idx}>{pageData.page}</CPaginationItem>\n                  ) : (\n                    <CPaginationItem key={idx}>\n                      <a href={\"/#/group/list?page=\" + idx}>{idx}</a>\n                    </CPaginationItem>\n                  ),\n                )}\n                {pageData.next ? (\n                  <CPaginationItem aria-label=\"Next\">\n                    <span aria-hidden=\"true\">\n                      <a href={\"/#/group/list?page=\" + String(parseInt(pageData.end) + 1)}>&raquo;</a>\n                    </span>\n                  </CPaginationItem>\n                ) : (\n                  <CPaginationItem aria-label=\"Next\" disabled>\n                    <span aria-hidden=\"true\">&raquo;</span>\n                  </CPaginationItem>\n                )}\n              </CPagination>\n            </CRow>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Grouplist\n"],"names":["search","decodeURI","window","location","href","split","params","URLSearchParams","nowPage","get","user","useSelector","loginUser","info","userId","token","access_token","useState","totalPage","page","size","start","end","prev","next","pageList","pageData","setPageData","groupList","setGroupList","axios","apiConfig","then","response","data","dtoList","xs","className","lg","id","placeholder","color","type","map","orientation","src","ReactImg_2","groupName","groupDescription","flush","regId","groupCnt","isParticipated","variant","onClick","e","groupId","headers","console","log","catch","error","isCreated","regDt","align","String","parseInt","disabled","idx","active"],"sourceRoot":""}