{"version":3,"file":"static/js/37.52a7f7a6.chunk.js","mappings":"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","sources":["views/analysis/user_survey_analysis.js","views/survey/detail/info/AnswerInfo.js","views/survey/detail/Detail.js","views/survey/detail/info/QuestionInfo.js","views/survey/detail/info/SurveyInfo.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CCardHeader, CRow } from '@coreui/react'\nimport { CChartPolarArea,CChartBar, CChartPie, CChartLine, CChartDoughnut } from '@coreui/react-chartjs'\nimport UsePromise from '../../lib/usePromise'\nimport axios from 'axios';\nimport apiConfig from '../../lib/apiConfig'\n\nconst Charts = (props) => {\n  const [one, setOne] = useState([]);\n  const [two, setTwo] = useState([]);\n  const [three, setThree] = useState([]);\n  const [four, setFour] = useState([]);\n  let Data = {\n    subject: '',\n    labels: [],\n    values:[]\n  }\n\n\n\n  const analysisInfo = async ()=>{\n\n    for (let analysisId = 1; analysisId < 5; analysisId++) {\n        const response = await axios.post(`${apiConfig.surveyAnalysisData}?analysis_Id=${analysisId}&sur_id=${props.surId}`)\n\n        Data['subject'] = response.data[0].analysisId.subject\n\n        let Data_labels = []\n        let Data_values = []\n\n        response.data.map(data =>{\n          Data_labels.push(data.optionName)\n          Data_values.push(data.value)\n        })\n        Data['labels'] = Data_labels\n        Data['values'] = Data_values\n\n        if (analysisId ===1){\n          setOne({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        } else if (analysisId ===2){\n          setTwo({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        } else if (analysisId ===3){\n          setThree({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        } else if (analysisId ===4){\n          setFour({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        }\n\n    }\n  }\n\n  useEffect(()=>{\n    analysisInfo();\n  },[]);\n\n  return (\n    <CRow>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{one.subject}</CCardHeader>\n          <CCardBody>\n            <CChartBar\n              data={\n                {\n                labels: one.label\n                ,\n                datasets: [\n                  {\n                    label: one.subject,\n                    backgroundColor: '#cfd0fe',\n                    data: one.value,\n                  },\n                ],\n              }}\n              labels=\"months\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{two.subject}</CCardHeader>\n          <CCardBody>\n          \n            <CChartLine\n              data={{\n                labels: two.label,\n                datasets: [\n                  {\n                    label: two.subject,\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                    borderColor: 'rgba(220, 220, 220, 1)',\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\n                    pointBorderColor: '#fff',\n                    data: two.value,\n                  }\n                ],\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{three.subject}</CCardHeader>\n          <CCardBody>\n\n          <CChartLine\n              data={{\n                labels: three.label,\n                datasets: [\n                  {\n                    label: three.subject,\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                    borderColor: 'rgba(220, 220, 220, 1)',\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\n                    pointBorderColor: '#fff',\n                    data: three.value,\n                  }\n                ],\n              }}\n            />\n\n            \n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{four.subject}</CCardHeader>\n          <CCardBody>\n          <CChartBar\n              data={\n                {\n                labels: four.label\n                ,\n                datasets: [\n                  {\n                    label: four.subject,\n                    backgroundColor: '#cfd0fe',\n                    data: four.value,\n                  },\n                ],\n              }}\n              labels=\"months\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Charts\n","import React, { useState } from 'react'\nimport {\n  CCol,\n  CButton,\n  CFormInput,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormCheck,\n  CFormTextarea, CFormRange,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport {useSelector} from \"react-redux\";\n\nconst AnswerInfo = ({questionList}) => {\n\n  return (\n    <div className=\"mt-3\">\n        <CAccordion alwaysOpen>\n          {questionList.map((question, index) => (\n            <CAccordionItem itemKey={index+1} key={question.queId}>\n              <CAccordionHeader>{index+1}. {question.content} </CAccordionHeader>\n              <CAccordionBody>\n                {question.questionType === \"YN\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  />\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumOnly\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                   />\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumMul\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"checkbox\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  />\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"Sub\" && (\n                  <CFormTextarea name=\"content\"></CFormTextarea>\n                )}\n\n                {question.questionType == \"Grd\" && (\n                  <CFormRange name=\"content\" min=\"0\" max=\"100\" step=\"10\" />\n                )}\n              </CAccordionBody>\n            </CAccordionItem>\n          ))}\n        </CAccordion>\n  \n    </div>\n  )\n \n\n}\n\nexport default AnswerInfo\n","import React, { useState } from 'react'\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CNav,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CTabPane,\n} from '@coreui/react'\n\nimport SurveyInfo from './info/SurveyInfo';\nimport QuestionInfo from './info/QuestionInfo';\nimport Charts from '../../analysis/user_survey_analysis';\nimport AnswerInfo from './info/AnswerInfo';\nimport { useParams } from 'react-router-dom'; \n\n\nimport axios from \"axios\";\nimport apiConfig from \"../../../lib/apiConfig\";\nimport usePromise from \"../../../lib/usePromise\";\n\n\nconst Detail = () => {\n\n  const [activeKey, setActiveKey] = useState(1)\n\n  const params = useParams();\n  let surId = params.sur_id;\n\n  let surInfo = null;\n  let questionList = []\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.surveyDetail,\n      {sur_id: surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n\n  if(response != null){\n    surInfo = response.data.info;\n    questionList = response.data.question_list\n  }\n\n  const SurveyparticipateOnClickHandler = (e, link,sur_id) => {\n    window.location.href = link+\"/\"+sur_id;\n  }\n  \n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong> 설문 상세 </strong>\n            <small> 설문의 상세 정보를 조회 할 수 있습니다.</small>\n          </CCardHeader>\n          <CCardBody>\n          <div>\n\n            <SurveyInfo surInfo={surInfo}/>\n\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '10vh',\n              }}\n            >\n              <CNav variant=\"pills\" role=\"tablist\">\n                <CNavItem>\n                  <CNavLink\n                    href=\"javascript:void(0);\"\n                    active={activeKey === 1}\n                    onClick={() => setActiveKey(1)}\n                  >\n                    설문 조회\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink\n                    href=\"javascript:void(0);\"\n                    active={activeKey === 2}\n                    onClick={() => setActiveKey(2)}\n                  >\n                    설문 결과\n                  </CNavLink>\n                </CNavItem>\n              </CNav>\n            </div>\n\n            <CTabContent>\n              <CTabPane role=\"tabpanel\" aria-labelledby=\"home-tab\" visible={activeKey === 1}>\n                 <AnswerInfo questionList={questionList}/>\n              </CTabPane>\n\n              <CTabPane role=\"tabpanel\" aria-labelledby=\"profile-tab\" visible={activeKey === 2}>\n                <Charts surId={surId}/>\n              </CTabPane>\n\n            </CTabContent>\n\n            <CCol lg={12} className=\"text-start d-flex mt-3\">\n              {/* <CButton color=\"danger\" href=\"#\" variant=\"outline\" onClick={removeAnswer}>\n                delete\n              </CButton> */}\n              {/* <CButton color=\"warning\" href=\"#\" variant=\"outline\">\n                copy\n              </CButton>  */}\n              {/* <CButton color=\"primary\" href=\"/#/survey/ModifySurvey\" className=\"ms-auto\" variant=\"outline\">\n                edit\n              </CButton> */}\n              <CButton color=\"primary\" className=\"ms-auto\" variant=\"outline\"\n                onClick={(e) => SurveyparticipateOnClickHandler(e, '#/survey/answer/register', surId)}>\n                participate\n              </CButton>\n              {/* <CButton color=\"success\" href=\"#\" variant=\"outline\">\n                excel download\n              </CButton> */}\n          </CCol>\n          </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n\n  )\n}\n\nexport default Detail\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  CCol,\n  CButton,\n  CFormInput,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormCheck,\n  CFormTextarea, CFormRange,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from \"../../../../lib/usePromise\";\n\nconst DetailInfo = ({surId, questionList}) => {\n  const { user } = useSelector(({user})=> ({user:user.user}));\n  const userId = user.info.userId;\n\n  const [answerList, setAnswerList] = useState([])\n\n\n  const makeAnswer = (e, queId) => {\n    const answerData = {\n      \"queId\": queId,\n      \"type\": 0,\n      \"content\": e.target.value,\n      \"regId\": userId\n    }\n    setAnswerList(answerList.filter(answer => answer.queId !== queId));\n    setAnswerList(answerList=>[...answerList, answerData])\n  }\n\n  const accessToken = user.token.access_token;\n  const sendAnswer = () => {\n    axios.post(apiConfig.answerRegister,\n      {\n        surId: surId,\n        answerDTOList: answerList\n      })\n      .then((response) => {\n        window.location.reload(`/#/survey/detail/${surId}`,{headers: {'Authorization': 'Bearer ' + accessToken }});\n      })\n  }\n\n\n  return (\n    <div className=\"mt-3\">\n        <CAccordion alwaysOpen>\n          {questionList.map((question, index) => (\n            <CAccordionItem itemKey={index+1} key={question.queId}>\n              <CAccordionHeader>{index+1}. {question.content} </CAccordionHeader>\n              <CAccordionBody>\n                {question.questionType === \"YN\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)}/>\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumOnly\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)} />\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumMul\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"checkbox\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)}/>\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"Sub\" && (\n                  <CFormTextarea name=\"content\" onBlur={(e) => makeAnswer(e,question.queId)}></CFormTextarea>\n                )}\n\n                {question.questionType == \"Grd\" && (\n                  <CFormRange name=\"content\" min=\"0\" max=\"100\" step=\"10\" onChange={(e) => makeAnswer(e,question.queId)}/>\n                )}\n              </CAccordionBody>\n            </CAccordionItem>\n          ))}\n        </CAccordion>\n      <CCol lg={12} className=\"text-start d-flex mt-1\">\n        <CButton color=\"primary\" href=\"#\" className=\"ms-auto\" variant=\"outline\" onClick={sendAnswer}>\n          send\n        </CButton>\n      </CCol>\n    </div>\n  )\n}\n\nexport default DetailInfo\n","import React, { useState } from 'react'\nimport {\n  CFormLabel,\n  CFormInput,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport moment from 'moment';\n\nconst SurveyInfo = ({surInfo}) => {\n  console.log(surInfo);\n\n  return (\n    <div>\n        <CRow>\n            <CFormLabel htmlFor=\"surveyName\" className=\"col-sm-2 col-form-label\">\n            설문명\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"surveyName\"\n                value={surInfo? surInfo.title:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n            <CFormLabel htmlFor=\"category\" className=\"col-sm-2 col-form-label\">\n            카테고리\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"category\"\n                value={surInfo? surInfo.categoryContent:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n          <CFormLabel htmlFor=\"description\" className=\"col-sm-2 col-form-label\">\n            설문설명\n          </CFormLabel>\n          <CCol sm={10}>\n            <CFormInput\n              type=\"text\"\n              id=\"description\"\n              value={surInfo? surInfo.description:null}\n              readOnly\n              plainText\n            />\n          </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"publicYn\" className=\"col-sm-2 col-form-label\">\n            공개여부\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"publicYn\"\n                value={surInfo? (surInfo.isPrivateYn==\"Y\"? \"대상자 공개\" : \"전체 공개\") :null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"regDt\" className=\"col-sm-2 col-form-label\">\n            등록일\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"regDt\"\n                value={surInfo ? moment(new Date(surInfo.regDt)).format('YYYY-MM-DD'):null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"regDt\" className=\"col-sm-2 col-form-label\">\n            마감일\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"regDt\"\n                value={surInfo ?moment(new Date(surInfo.dueDt)).format('YYYY-MM-DD'):null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"regId\" className=\"col-sm-2 col-form-label\">\n            설문 등록자 \n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"regId\"\n                value={surInfo? surInfo.regId : null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n\n\n    </div>\n  )\n}\n\nexport default SurveyInfo\n"],"names":["props","useState","one","setOne","two","setTwo","three","setThree","four","setFour","Data","subject","labels","values","analysisInfo","analysisId","axios","apiConfig","surId","response","data","Data_labels","Data_values","map","push","optionName","value","useEffect","xs","className","label","datasets","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","questionList","alwaysOpen","question","index","itemKey","content","questionType","optionList","option","type","name","queId","queOptId","min","max","step","activeKey","setActiveKey","useParams","sur_id","surInfo","usePromise","headers","info","question_list","SurveyInfo","style","display","alignItems","justifyContent","height","variant","role","href","active","onClick","visible","lg","color","e","link","window","location","user","useSelector","userId","answerList","setAnswerList","makeAnswer","answerData","target","filter","answer","accessToken","token","access_token","onChange","onBlur","answerDTOList","then","reload","console","log","htmlFor","sm","id","title","readOnly","plainText","categoryContent","description","isPrivateYn","moment","Date","regDt","format","dueDt","regId"],"sourceRoot":""}