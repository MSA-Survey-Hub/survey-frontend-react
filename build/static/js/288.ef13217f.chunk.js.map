{"version":3,"file":"static/js/288.ef13217f.chunk.js","mappings":"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","sources":["views/survey/detail/info/UpdateInfo.js","views/survey/detail/EditAnswer.js","views/survey/detail/info/SurveyInfo.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  CCol,\n  CButton,\n  CFormInput,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormCheck,\n  CFormTextarea, CFormRange,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from \"../../../../lib/usePromise\";\nconst DetailInfo = (props) => {\n  const [answerList, setAnswerList] = useState([])\n  const [updateList, setUpdateList] = useState([])\n  const { user } = useSelector(({user})=> ({user:user.user}));\n\n  const accessToken = user.token.access_token;\n  const userId = user.info.userId;\n\n  // 답변 정보 받아오기\n  useState( async () => {\n    axios.post(apiConfig.answerList,\n      {regId: userId, surId: props.surId},\n      {headers: {\n          'Content-Type': 'multipart/form-data'\n        }}\n    ).then((response) => {\n      setAnswerList(response.data)\n    })\n  })\n\n  const makeAnswer = (e, answer) => {\n    const updateData = {\n      \"ansId\": answer.ansId,\n      \"queId\": answer.queId,\n      \"type\": answer.ansType,\n      \"content\": e.target.value,\n      \"regId\": answer.regId\n    }\n    console.log(updateData)\n    setUpdateList(updateList.filter(update => update.queId !== answer.queId));\n    setUpdateList(updateList=>[...updateList, updateData])\n  }\n\n  const sendAnswer = () => {\n    axios.post(apiConfig.answerEdit,\n      {\n        surId: props.surId,\n        answerDTOList: updateList\n      })\n      .then((response) => {\n        window.location.reload(`/#/survey/detail/${props.surId}`);\n      })\n  }\n\n  let token = false;\n\n  // let Test = (answer)=>{\n  //   if (token===false){\n  //     <CFormTextarea\n  //           name={answer.ansId}\n  //           defaultValue={answer.ansContent}\n  //           onChange={(event)=>{makeAnswer(event, answer.queId)}}\n  //     ></CFormTextarea>,\n  //     token = true\n  //   } else{\n  //     <CFormTextarea\n  //           name={answer.ansId}\n  //           onChange={(event)=>{makeAnswer(event, answer.queId)}}\n  //     ></CFormTextarea>\n  //   }\n  // }\n\n\n  return (\n    <div className=\"mt-3\">\n        <CAccordion alwaysOpen>\n          {answerList.map((answer, index) => (\n              <CAccordionItem itemKey={index+1} key={answer.queId}>\n                <CAccordionHeader>{index+1}. {answer.queContent} </CAccordionHeader>\n                <CAccordionBody>\n                  {answer.queType === \"YN\" && (\n                    <>\n                      {answer.optionList.map((option) => (\n                        <CFormCheck\n                          type=\"radio\"\n                          name={answer.ansId}\n                          key={option.queOptId}\n                          label={option.optionName}\n                          value={option.optionName}\n                          defaultChecked={answer.ansContent === option.optionName?true:false}\n                          onChange={(event)=>{makeAnswer(event, answer)}}\n                        />\n                      ))}\n                    </>\n                  )}\n\n                  {answer.queType === \"NumOnly\" && (\n                    <>\n                      {answer.optionList.map((option) => (\n                        <CFormCheck\n                          type=\"radio\"\n                          name={answer.ansId}\n                          key={option.queOptId}\n                          label={option.optionName}\n                          value={option.optionName}\n                          defaultChecked={answer.ansContent === option.optionName?true:false}\n                          onChange={(event)=>{makeAnswer(event, answer)}}\n                        />\n                      ))}\n                    </>\n                  )}\n\n                  {answer.queType === \"NumMul\" && (\n                    <>\n                      {answer.optionList.map((option) => (\n                        <CFormCheck\n                          type=\"checkbox\"\n                          name={answer.ansId}\n                          key={option.queOptId}\n                          label={option.optionName}\n                          value={option.optionName}\n                          defaultChecked={answer.ansContent === option.optionName?true:false}\n                          onChange={(event)=>{makeAnswer(event, answer)}}\n                        />\n                      ))}\n                    </>\n                  )}\n\n                  {answer.queType === \"Sub\" && (\n                    <CFormTextarea\n                      name={answer.ansId}\n                      defaultValue={answer.ansContent}\n                      onChange={(event)=>{makeAnswer(event, answer)}}\n                    ></CFormTextarea>\n                  )}\n\n                  {answer.queType == \"Grd\" && (\n                    <CFormRange\n                      name={answer.ansId}\n                      min=\"0\" max=\"100\" step=\"10\"\n                      defaultValue={answer.ansContent}\n                      onChange={(event)=>{makeAnswer(event, answer)}}\n                    />\n                  )}\n                </CAccordionBody>\n              </CAccordionItem>\n          ))}\n        </CAccordion>\n      <CCol lg={12} className=\"text-start d-flex mt-1\">\n        <CButton color=\"primary\" href=\"#\" className=\"ms-auto\" variant=\"outline\" onClick={sendAnswer}>\n          send\n        </CButton>\n      </CCol>\n    </div>\n  )\n}\n\nexport default DetailInfo\n","import {\n  CCard, CCardBody, CCardHeader, CCol, CRow,\n} from \"@coreui/react\";\nimport React from \"react\";\nimport SurveyInfo from \"./info/SurveyInfo\";\nimport UpdateInfo from \"./info/UpdateInfo\";\n// import { useHistory } from \"react-router\";\nimport { useParams } from 'react-router-dom'; \n\nconst ModifySurvey = () => {\n\nconst params = useParams();\nlet surId = params.sur_id;\n\n  return(\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>답변 수정 </strong>\n            <small> 참여한 설문의 답변을 수정 할 수 있습니다.</small>\n          </CCardHeader>\n          <CCardBody>\n            <div>\n              <SurveyInfo surId={surId}></SurveyInfo>\n              <UpdateInfo surId={surId}/>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n\n  )\n}\n\nexport default ModifySurvey\n","import React, { useState } from 'react'\nimport {\n  CFormLabel,\n  CFormInput,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from 'src/lib/usePromise';\n\nconst DetailInfo = (props) => {\n  // const [surInfo, setSurInfo] = useState([])\n\n  let surInfo = null;\n  console.log(props.surId);\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.surveyDetail,\n      {sur_id: props.surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n  \n  console.log(response);\n  if(response != null){\n    surInfo = response.data.info;\n  }\n\n  // axios.post(apiConfig.surveyDetail,\n  //   {sur_id: props.surId},\n  //   {headers: {\n  //       'Content-Type': 'multipart/form-data'\n  //     }}\n  // ).then((response) => {\n  //   setSurInfo(response.data.info)\n  // })\n\n  return (\n    <div>\n        <CRow>\n            <CFormLabel htmlFor=\"surveyName\" className=\"col-sm-2 col-form-label\">\n            설문명\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"surveyName\"\n                value={surInfo? surInfo.title:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n            <CFormLabel htmlFor=\"category\" className=\"col-sm-2 col-form-label\">\n            카테고리\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"category\"\n                value={surInfo? surInfo.categoryContent:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n          <CFormLabel htmlFor=\"description\" className=\"col-sm-2 col-form-label\">\n            설문설명\n          </CFormLabel>\n          <CCol sm={10}>\n            <CFormInput\n              type=\"text\"\n              id=\"description\"\n              value={surInfo? surInfo.description:null}\n              readOnly\n              plainText\n            />\n          </CCol>\n        </CRow>\n\n        {/* <CRow>\n            <CFormLabel htmlFor=\"publicYn\" className=\"col-sm-2 col-form-label\">\n            공개여부\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"publicYn\"\n                defaultValue=\"클라우드 전용 그룹(그룹)\"\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow> */}\n\n    </div>\n  )\n}\n\nexport default DetailInfo\n"],"names":["props","useState","answerList","setAnswerList","updateList","setUpdateList","user","useSelector","userId","token","access_token","info","axios","apiConfig","regId","surId","headers","then","response","data","makeAnswer","e","answer","updateData","ansId","queId","ansType","target","value","console","log","filter","update","className","alwaysOpen","map","index","itemKey","queContent","queType","optionList","option","type","name","label","optionName","defaultChecked","ansContent","onChange","event","queOptId","defaultValue","min","max","step","lg","color","href","variant","onClick","answerDTOList","window","location","reload","useParams","sur_id","xs","SurveyInfo","UpdateInfo","surInfo","usePromise","htmlFor","sm","id","title","readOnly","plainText","categoryContent","description"],"sourceRoot":""}