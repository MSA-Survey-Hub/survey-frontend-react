{"version":3,"file":"static/js/2037.f9939e19.chunk.js","mappings":"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","sources":["views/analysis/user_survey_analysis.js","views/survey/detail/info/AnswerInfo.js","views/survey/detail/Detail.js","views/survey/detail/info/SurveyInfo.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CCard, CCardBody, CCol, CCardHeader, CRow } from '@coreui/react'\nimport { CChartPolarArea,CChartBar, CChartPie, CChartLine, CChartDoughnut } from '@coreui/react-chartjs'\nimport UsePromise from '../../lib/usePromise'\nimport axios from 'axios';\nimport apiConfig from '../../lib/apiConfig'\n\nconst Charts = (props) => {\n  const [one, setOne] = useState([]);\n  const [two, setTwo] = useState([]);\n  const [three, setThree] = useState([]);\n  const [four, setFour] = useState([]);\n  let Data = {\n    subject: '',\n    labels: [],\n    values:[]\n  }\n\n\n\n  const analysisInfo = async ()=>{\n\n    for (let analysisId = 1; analysisId < 5; analysisId++) {\n        const response = await axios.post(`${apiConfig.surveyAnalysisData}?analysis_Id=${analysisId}&sur_id=${props.surId}`)\n\n        console.log('hihi',`${apiConfig.surveyAnalysisData}?analysis_Id=${analysisId}`)\n        Data['subject'] = response.data[0].analysisId.subject\n\n        let Data_labels = []\n        let Data_values = []\n\n        response.data.map(data =>{\n          Data_labels.push(data.optionName)\n          Data_values.push(data.value)\n        })\n        Data['labels'] = Data_labels\n        Data['values'] = Data_values\n\n        if (analysisId ===1){\n          setOne({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        } else if (analysisId ===2){\n          setTwo({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        } else if (analysisId ===3){\n          setThree({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        } else if (analysisId ===4){\n          setFour({'subject':response.data[0].analysisId.subject, 'label':Data_labels, 'value':Data_values});\n        }\n\n    }\n  }\n\n  useEffect(()=>{\n    analysisInfo();\n  },[]);\n\n  return (\n    <CRow>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{one.subject}</CCardHeader>\n          <CCardBody>\n            <CChartBar\n              data={\n                {\n                labels: one.label\n                ,\n                datasets: [\n                  {\n                    label: one.subject,\n                    backgroundColor: '#cfd0fe',\n                    data: one.value,\n                  },\n                ],\n              }}\n              labels=\"months\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{two.subject}</CCardHeader>\n          <CCardBody>\n          \n            <CChartLine\n              data={{\n                labels: two.label,\n                datasets: [\n                  {\n                    label: two.subject,\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                    borderColor: 'rgba(220, 220, 220, 1)',\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\n                    pointBorderColor: '#fff',\n                    data: two.value,\n                  }\n                ],\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{three.subject}</CCardHeader>\n          <CCardBody>\n\n          <CChartLine\n              data={{\n                labels: three.label,\n                datasets: [\n                  {\n                    label: three.subject,\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\n                    borderColor: 'rgba(220, 220, 220, 1)',\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\n                    pointBorderColor: '#fff',\n                    data: three.value,\n                  }\n                ],\n              }}\n            />\n\n            \n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>{four.subject}</CCardHeader>\n          <CCardBody>\n          <CChartBar\n              data={\n                {\n                labels: four.label\n                ,\n                datasets: [\n                  {\n                    label: four.subject,\n                    backgroundColor: '#cfd0fe',\n                    data: four.value,\n                  },\n                ],\n              }}\n              labels=\"months\"\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Charts\n","import React, { useState } from 'react'\nimport {\n  CCol,\n  CButton,\n  CFormInput,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormCheck,\n  CFormTextarea, CFormRange,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport {useSelector} from \"react-redux\";\nimport usePromise from \"../../../../lib/usePromise\";\n\nconst DetailInfo = (props) => {\n  const { user } = useSelector(({user})=> ({user:user.user}));\n  const userId = user.info.userId;\n\n  let answerList = []\n\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.answerList,\n      {regId: userId, surId: props.surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n\n  if(response != null){\n    answerList = response.data\n  }\n\n  return (\n    <div className=\"mt-3\">\n        <CAccordion alwaysOpen>\n          {answerList.map((answer, index) => (\n              <CAccordionItem itemKey={index+1} key={answer.queId}>\n                <CAccordionHeader>{index+1}. {answer.queContent} </CAccordionHeader>\n                <CAccordionBody>\n                  {answer.queType === \"YN\" && (\n                    <>\n                      {answer.optionList.map((option) => (\n                        <CFormCheck\n                          type=\"radio\"\n                          name={answer.ansId}\n                          key={option.queOptId}\n                          label={option.optionName}\n                          checked={answer.ansContent === option.optionName?true:false}\n                          readOnly\n                        />\n                      ))}\n                    </>\n                  )}\n\n                  {answer.queType === \"NumOnly\" && (\n                    <>\n                      {answer.optionList.map((option) => (\n                        <CFormCheck\n                          type=\"radio\"\n                          name={answer.ansId}\n                          key={option.queOptId}\n                          label={option.optionName}\n                          checked={answer.ansContent === option.optionName?true:false}\n                          readOnly\n                        />\n                      ))}\n                    </>\n                  )}\n\n                  {answer.queType === \"NumMul\" && (\n                    <>\n                      {answer.optionList.map((option) => (\n                        <CFormCheck\n                          type=\"checkbox\"\n                          name={answer.ansId}\n                          key={option.queOptId}\n                          label={option.optionName}\n                          checked={answer.ansContent === option.optionName?true:false}\n                          readOnly\n                        />\n                      ))}\n                    </>\n                  )}\n\n                  {answer.queType === \"Sub\" && (\n                    <CFormTextarea\n                      name={answer.ansId}\n                      value={answer.ansContent}\n                      readOnly\n                    ></CFormTextarea>\n                  )}\n\n                  {answer.queType == \"Grd\" && (\n                    <CFormRange\n                      name={answer.ansId}\n                      min=\"0\" max=\"100\" step=\"10\"\n                      value={answer.ansContent}\n                      readOnly\n                    />\n                  )}\n                </CAccordionBody>\n              </CAccordionItem>\n          ))}\n        </CAccordion>\n    </div>\n  )\n}\n\nexport default DetailInfo\n","import React, { useState } from 'react'\nimport {\n  CButton,\n  CCol,\n  CRow,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CNav,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CTabPane,\n} from '@coreui/react'\n\nimport SurveyInfo from './info/SurveyInfo';\nimport Charts from '../../analysis/user_survey_analysis';\nimport AnswerInfo from './info/AnswerInfo';\nimport axios from \"axios\";\nimport apiConfig from \"../../../lib/apiConfig\";\n\nimport { useParams } from 'react-router-dom'; \n\nconst Detail = () => {\n\n  const [activeKey, setActiveKey] = useState(1)\n\n  const removeAnswer = () => {\n    axios.post(apiConfig.answerDelete,\n      {regId: \"yena\", surId: 2},\n      {headers: {\n          'Content-Type': 'multipart/form-data'\n        }})\n      .then((response) => {\n        window.location.reload(\"/#/survey/detail\");\n      })\n  }\n  const params = useParams();\n  let surId = params.sur_id;\n\n  const SurveyparticipateOnClickHandler = (e, link,sur_id) => {\n    window.location.href = link+\"/\"+sur_id;\n  }\n  \n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong> 설문 상세 </strong>\n            <small> 설문의 상세 정보를 조회 할 수 있습니다.</small>\n          </CCardHeader>\n          <CCardBody>\n          <div>\n            <SurveyInfo surId={surId}></SurveyInfo>\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '10vh',\n              }}\n            >\n              <CNav variant=\"pills\" role=\"tablist\">\n                <CNavItem>\n                  <CNavLink\n                    href=\"javascript:void(0);\"\n                    active={activeKey === 1}\n                    onClick={() => setActiveKey(1)}\n                  >\n                    설문 조회\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink\n                    href=\"javascript:void(0);\"\n                    active={activeKey === 2}\n                    onClick={() => setActiveKey(2)}\n                  >\n                    설문 결과\n                  </CNavLink>\n                </CNavItem>\n              </CNav>\n            </div>\n            <CTabContent>\n              <CTabPane role=\"tabpanel\" aria-labelledby=\"home-tab\" visible={activeKey === 1}>\n                 <AnswerInfo surId={surId}/>\n              </CTabPane>\n              <CTabPane role=\"tabpanel\" aria-labelledby=\"profile-tab\" visible={activeKey === 2}>\n                <Charts surId={surId}/>\n              </CTabPane>\n            </CTabContent>\n            <CCol lg={12} className=\"text-start d-flex mt-3\">\n              {/* <CButton color=\"danger\" href=\"#\" variant=\"outline\" onClick={removeAnswer}>\n                delete\n              </CButton> */}\n              <CButton color=\"warning\" href=\"#\" variant=\"outline\">\n                copy\n              </CButton> \n              {/* <CButton color=\"primary\" href=\"/#/survey/ModifySurvey\" className=\"ms-auto\" variant=\"outline\">\n                edit\n              </CButton> */}\n              <CButton color=\"primary\" className=\"ms-auto\" variant=\"outline\"\n                onClick={(e) => SurveyparticipateOnClickHandler(e, '#/survey/answer/register', surId)}>\n                participate\n              </CButton>\n              {/* <CButton color=\"success\" href=\"#\" variant=\"outline\">\n                excel download\n              </CButton> */}\n          </CCol>\n          </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n\n  )\n}\n\nexport default Detail\n","import React, { useState } from 'react'\nimport {\n  CFormLabel,\n  CFormInput,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from 'src/lib/usePromise';\n\nconst DetailInfo = (props) => {\n  // const [surInfo, setSurInfo] = useState([])\n\n  let surInfo = null;\n  console.log(props.surId);\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.surveyDetail,\n      {sur_id: props.surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n  \n  console.log(response);\n  if(response != null){\n    surInfo = response.data.info;\n  }\n\n  // axios.post(apiConfig.surveyDetail,\n  //   {sur_id: props.surId},\n  //   {headers: {\n  //       'Content-Type': 'multipart/form-data'\n  //     }}\n  // ).then((response) => {\n  //   setSurInfo(response.data.info)\n  // })\n\n  return (\n    <div>\n        <CRow>\n            <CFormLabel htmlFor=\"surveyName\" className=\"col-sm-2 col-form-label\">\n            설문명\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"surveyName\"\n                value={surInfo? surInfo.title:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n            <CFormLabel htmlFor=\"category\" className=\"col-sm-2 col-form-label\">\n            카테고리\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"category\"\n                value={surInfo? surInfo.categoryContent:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n          <CFormLabel htmlFor=\"description\" className=\"col-sm-2 col-form-label\">\n            설문설명\n          </CFormLabel>\n          <CCol sm={10}>\n            <CFormInput\n              type=\"text\"\n              id=\"description\"\n              value={surInfo? surInfo.description:null}\n              readOnly\n              plainText\n            />\n          </CCol>\n        </CRow>\n\n        {/* <CRow>\n            <CFormLabel htmlFor=\"publicYn\" className=\"col-sm-2 col-form-label\">\n            공개여부\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"publicYn\"\n                defaultValue=\"클라우드 전용 그룹(그룹)\"\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow> */}\n\n    </div>\n  )\n}\n\nexport default DetailInfo\n"],"names":["props","useState","one","setOne","two","setTwo","three","setThree","four","setFour","Data","subject","labels","values","analysisInfo","analysisId","axios","apiConfig","surId","response","console","log","data","Data_labels","Data_values","map","push","optionName","value","useEffect","xs","className","label","datasets","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","userId","useSelector","user","info","answerList","usePromise","regId","headers","alwaysOpen","answer","index","itemKey","queContent","queType","optionList","option","type","name","ansId","checked","ansContent","readOnly","queOptId","min","max","step","queId","activeKey","setActiveKey","useParams","sur_id","SurveyInfo","style","display","alignItems","justifyContent","height","variant","role","href","active","onClick","visible","AnswerInfo","lg","color","e","link","window","location","surInfo","htmlFor","sm","id","title","plainText","categoryContent","description"],"sourceRoot":""}