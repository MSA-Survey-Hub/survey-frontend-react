{"version":3,"file":"static/js/569.eb651b85.chunk.js","mappings":"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","sources":["lib/Loading/Styles2.js","lib/Loading/Loading2.js","views/survey/list/MakeList.js","views/survey/list/SurveyCard.js"],"sourcesContent":["// Styles.js\nimport styled from 'styled-components';\n\nexport const Background = styled.div`\n  position: absolute;\n  width: 100vw;\n  height: 70vh;\n  top: 0;\n  left: 0;\n  background: #ffffffb7;\n  z-index: 999;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LoadingText = styled.div`\n  font: 1rem 'Noto Sans KR';\n  text-align: center;\n`;","import React from 'react';\nimport ladingImage from 'src/assets/images/loading/loading2.gif';\nimport {Background, LoadingText} from './Styles2';\n\nexport const Loading = () => {\n    return (\n        <>\n            <Background>\n                <LoadingText>잠시만 기다려 주세요.</LoadingText>\n                <img src={ladingImage} alt=\"로딩중\" width=\"5%\" />\n            </Background>\n        </>\n      );\n  };\n\nexport default Loading;\n\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux'\nimport {\n  CInputGroup,\n  CFormInput,\n  CButton,\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CForm,\n  CCardHeader,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from 'src/lib/apiConfig';\nimport usePromise from 'src/lib/usePromise';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport Loading from 'src/lib/Loading/Loading2';\nimport Pagination from \"react-js-pagination\";\nimport SurveyCard from './SurveyCard';\n\nconst MakeList = () => {\n  const { user } = useSelector(({user})=> ({user:user.user}));\n  const accessToken = user.token.access_token;\n\n\n  const [loading, setLoading] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [surveyList, setSurveyList] = useState([]);\n  const [pageData, setPageData] = useState({\n    totalPage: 0,\n    page: 1,\n    size: 0,\n    start: 0,\n    end: 0,\n    prev: false,\n    next: false,\n    totalElements : 1\n  })\n  const [keyword, setKeyword] = useState('');\n  const [savedkeyword, setSavedKeyword] = useState('');\n\n\n\n  useEffect(() => {\n    setLoading(true);\n    handleFetch(1, '');\n  }, []);\n  \n\n  // 카테고리 리스트\n  let categoryOptionList = [];\n  const animatedComponents = makeAnimated();\n  const [cloading, response, cerror] = usePromise(() => {\n    return axios.get(apiConfig.surveyCategorySelectList)\n  }, []);\n  if(response != null){\n    response.data.map((option) => {\n      categoryOptionList.push({ value: option.surCatId, label: option.content });\n    });\n  }\n\n  // 선택된 카테고리 배열\n  function getSelectedCategory(){\n    let arr= [];\n    if(selectedOption != null){\n      selectedOption.forEach(function(option) {\n        arr.push(option.value);\n      });\n    };\n    return arr;\n  }\n\n  // 설문 리스트\n  const handleFetch = (selectedPage, title) => {\n    setLoading(true);\n\n    axios.get(apiConfig.surveyMakeList + \"?category=\"+getSelectedCategory()+\"&page=\"+ selectedPage+\"&title=\"+ title, \n    {headers: {'Authorization': 'Bearer ' + accessToken }})\n    .then(response => {\n      const data = response.data;\n      setSurveyList(data.content);\n      setPageData({\n      totalPage: 0,\n      page: data.number+1,\n      size: data.size,\n      start: 1,\n      end: data.totalPages,\n      prev: data.first? false: true,\n      next: data.last? false: true,\n      totalElements : data.totalElements\n    }); \n      setLoading(false);\n    })\n    .catch(error => console.error('Error', error));\n  };\n\n  const handlePageChange = (selectedPage) => {\n    handleFetch(selectedPage, savedkeyword);\n  };\n\n  const handlekeywordChange = (e) => {\n    const { value, name } = e.target;\n    setKeyword(value);\n  };\n\n  const handleClickSearch = () => {\n    setSavedKeyword(keyword);\n    handleFetch(1, keyword);\n  };\n\n\n  return (\n    <>\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong> 생성 목록 </strong>\n            <small> 생성한 설문조사를 조회 할 수 있습니다. </small>\n          </CCardHeader>\n          <CCardBody>\n            <CCard className=\"mb-2\">\n              <CCardBody>\n                <CForm>\n                  <CInputGroup className=\"mb-4\">\n                    <Select\n                        closeMenuOnSelect={false}\n                        components={animatedComponents}\n                        isMulti\n                        options={categoryOptionList}\n                        onChange={setSelectedOption}\n                      />\n                    <CFormInput placeholder='제목을 입력하세요.' value={keyword} onChange={handlekeywordChange}/>\n                    <CButton type=\"button\" onClick={handleClickSearch}>검색</CButton>\n                  </CInputGroup>\n                </CForm>\n                <CRow>\n                { loading ? <Loading /> : <>\n                  {\n                    surveyList.length > 0 ? \n                      surveyList.map((data) => (\n                      <SurveyCard key={data.surId} data={data} ></SurveyCard>\n                      ))  : '생성 목록이 없습니다.'\n                  }\n                  </>\n                }\n                </CRow>\n                  {\n                    surveyList.length > 0 ? (<Pagination\n                      activePage={pageData.page}\n                      itemsCountPerPage={pageData.size}\n                      totalItemsCount={pageData.totalElements}\n                      pageRangeDisplayed={10}\n                      prevPageText={\"‹\"}\n                      nextPageText={\"›\"}\n                      onChange={handlePageChange}\n                    />) : ''\n                    }\n              </CCardBody>\n            </CCard>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n    </>)\n  }\n\nexport default MakeList\n","import React, {  } from 'react';\nimport {\n\n    CButton,\n    CCard,\n    CCardImage,\n    CCardBody,\n    CCardTitle,\n    CCardText,\n    CCol,\n    CCardFooter,\n    CCardHeader,\n    CBadge,\n  } from '@coreui/react';\n  import moment from 'moment';\n  import ReactImg_2 from 'src/assets/images/test5.jpeg';\n\n  \n  const SurveyCard = ({data}) => {\n\n    const DuplicateSurveyOnClickHandler = (e, link,sur_id) => {\n        window.location.href = link+'?copy='+sur_id;\n      }\n    \n      const SurveyDetailOnClickHandler = (e, link,sur_id) => {\n        window.location.href = link+\"/\"+sur_id;\n      }\n\n      return (\n        <>\n        <CCol xs={3} >\n        <CCard className=\"mb-4\">\n        <CCardHeader>{data.categoryContent}</CCardHeader>\n        <CCardImage orientation=\"top\" src={data.surveImg == undefined || data.surveImg == null ? ReactImg_2 : data.statusName } />\n        <CCardBody>\n            <CCardTitle>{data.title}</CCardTitle>\n            <CCardText>\n            <small>{moment(new Date(data.regDt)).format('YYYY-MM-DD')}~ {moment(new Date(data.dueDt)).format('YYYY-MM-DD')}</small><br/>\n        \n            <CBadge color={ data.statusName == \"제작\" ?  \"success\" : (data.statusName == \"배포\" ?\"primary\" : \"danger\")}> {data.statusName}</CBadge>\n            </CCardText>\n        </CCardBody>\n        <CCardFooter>\n            <CButton color=\"primary\" variant=\"outline\" className=\"m-1\" size=\"sm\" onClick={(e) => SurveyDetailOnClickHandler(e, '#/survey/detail', data.surId)}>Details</CButton>\n            { data.statusName != \"제작\" ? (  <CButton color=\"warning\" variant=\"outline\" className=\"m-1\" size=\"sm\" onClick={(e) => DuplicateSurveyOnClickHandler(e, '#/survey/create',data.sur_id)}>Copy</CButton>):null}\n            { data.statusName == \"제작\" ? (  <CButton color=\"success\" variant=\"outline\" className=\"m-1\" size=\"sm\">Edit</CButton>):null}\n            { data.statusName == \"제작\" ? ( <CButton color=\"danger\" variant=\"outline\" className=\"m-1\" size=\"sm\">Remove</CButton>):null}\n        </CCardFooter>\n        </CCard>\n        </CCol>\n    </>\n    )\n  }\n\n  export default SurveyCard\n"],"names":["Background","styled","LoadingText","src","ladingImage","alt","width","accessToken","useSelector","user","token","access_token","useState","loading","setLoading","selectedOption","setSelectedOption","surveyList","setSurveyList","totalPage","page","size","start","end","prev","next","totalElements","pageData","setPageData","keyword","setKeyword","savedkeyword","setSavedKeyword","useEffect","handleFetch","categoryOptionList","animatedComponents","makeAnimated","usePromise","axios","apiConfig","response","data","map","option","push","value","surCatId","label","content","selectedPage","title","arr","forEach","getSelectedCategory","headers","then","number","totalPages","first","last","catch","error","console","xs","className","closeMenuOnSelect","components","isMulti","options","onChange","placeholder","e","target","name","type","onClick","length","surId","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","prevPageText","nextPageText","categoryContent","orientation","undefined","surveImg","ReactImg_2","statusName","moment","Date","regDt","format","dueDt","color","variant","link","sur_id","window","location","href"],"sourceRoot":""}