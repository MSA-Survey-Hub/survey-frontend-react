{"version":3,"file":"static/js/3178.5127085c.chunk.js","mappings":"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","sources":["views/survey/detail/info/QuestionInfo.js","views/survey/detail/RegisterAnswer.js","views/survey/detail/info/SurveyInfo.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  CCol,\n  CButton,\n  CFormInput,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormCheck,\n  CFormTextarea, CFormRange,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from \"../../../../lib/usePromise\";\n\nconst DetailInfo = (props) => {\n  const { user } = useSelector(({user})=> ({user:user.user}));\n  const userId = user.info.userId;\n\n  const [answerList, setAnswerList] = useState([])\n\n\n  let questionList = []\n\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.surveyDetail,\n      {sur_id: props.surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n\n  if(response != null){\n    questionList = response.data.question_list\n  }\n\n\n  const makeAnswer = (e, queId) => {\n    const answerData = {\n      \"queId\": queId,\n      \"type\": 0,\n      \"content\": e.target.value,\n      \"regId\": userId\n    }\n    setAnswerList(answerList.filter(answer => answer.queId !== queId));\n    setAnswerList(answerList=>[...answerList, answerData])\n  }\n\n  const accessToken = user.token.access_token;\n  const sendAnswer = () => {\n    axios.post(apiConfig.answerRegister,\n      {\n        surId: props.surId,\n        answerDTOList: answerList\n      })\n      .then((response) => {\n        window.location.reload(`/#/survey/detail/${props.surId}`,{headers: {'Authorization': 'Bearer ' + accessToken }});\n      })\n  }\n\n\n  return (\n    <div className=\"mt-3\">\n        <CAccordion alwaysOpen>\n          {questionList.map((question, index) => (\n            <CAccordionItem itemKey={index+1} key={question.queId}>\n              <CAccordionHeader>{index+1}. {question.content} </CAccordionHeader>\n              <CAccordionBody>\n                {question.questionType === \"YN\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)}/>\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumOnly\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)} />\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumMul\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"checkbox\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)}/>\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"Sub\" && (\n                  <CFormTextarea name=\"content\" onBlur={(e) => makeAnswer(e,question.queId)}></CFormTextarea>\n                )}\n\n                {question.questionType == \"Grd\" && (\n                  <CFormRange name=\"content\" min=\"0\" max=\"100\" step=\"10\" onChange={(e) => makeAnswer(e,question.queId)}/>\n                )}\n              </CAccordionBody>\n            </CAccordionItem>\n          ))}\n        </CAccordion>\n      <CCol lg={12} className=\"text-start d-flex mt-1\">\n        <CButton color=\"primary\" href=\"#\" className=\"ms-auto\" variant=\"outline\" onClick={sendAnswer}>\n          send\n        </CButton>\n      </CCol>\n    </div>\n  )\n}\n\nexport default DetailInfo\n","import React, {useState} from \"react\";\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CRow, CCol,\n} from \"@coreui/react\";\nimport axios from \"axios\";\nimport SurveyInfo from \"./info/SurveyInfo\";\nimport QuestionInfo from \"./info/QuestionInfo\";\nimport { useParams } from 'react-router-dom'; \n\n\nconst RegisterAnswer = () => {\n  const [activeKey, setActiveKey] = useState(1)\n  // const [surId, setSurId] = useState(2)\n\n  const params = useParams();\n  let surId = params.sur_id;\n  \n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong> 설문 참여 </strong>\n            <small> 설문에 참여 할 수 있습니다.</small>\n          </CCardHeader>\n          <CCardBody>\n            <div>\n              <SurveyInfo surId={surId}></SurveyInfo>\n              <QuestionInfo surId={surId}/>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\nexport default RegisterAnswer\n","import React, { useState } from 'react'\nimport {\n  CFormLabel,\n  CFormInput,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from 'src/lib/usePromise';\n\nconst DetailInfo = (props) => {\n  // const [surInfo, setSurInfo] = useState([])\n\n  let surInfo = null;\n  console.log(props.surId);\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.surveyDetail,\n      {sur_id: props.surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n  \n  console.log(response);\n  if(response != null){\n    surInfo = response.data.info;\n  }\n\n  // axios.post(apiConfig.surveyDetail,\n  //   {sur_id: props.surId},\n  //   {headers: {\n  //       'Content-Type': 'multipart/form-data'\n  //     }}\n  // ).then((response) => {\n  //   setSurInfo(response.data.info)\n  // })\n\n  return (\n    <div>\n        <CRow>\n            <CFormLabel htmlFor=\"surveyName\" className=\"col-sm-2 col-form-label\">\n            설문명\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"surveyName\"\n                value={surInfo? surInfo.title:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n            <CFormLabel htmlFor=\"category\" className=\"col-sm-2 col-form-label\">\n            카테고리\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"category\"\n                value={surInfo? surInfo.categoryContent:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n          <CFormLabel htmlFor=\"description\" className=\"col-sm-2 col-form-label\">\n            설문설명\n          </CFormLabel>\n          <CCol sm={10}>\n            <CFormInput\n              type=\"text\"\n              id=\"description\"\n              value={surInfo? surInfo.description:null}\n              readOnly\n              plainText\n            />\n          </CCol>\n        </CRow>\n\n        {/* <CRow>\n            <CFormLabel htmlFor=\"publicYn\" className=\"col-sm-2 col-form-label\">\n            공개여부\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"publicYn\"\n                defaultValue=\"클라우드 전용 그룹(그룹)\"\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow> */}\n\n    </div>\n  )\n}\n\nexport default DetailInfo\n"],"names":["props","user","useSelector","userId","info","useState","answerList","setAnswerList","questionList","usePromise","axios","apiConfig","sur_id","surId","headers","response","data","question_list","makeAnswer","e","queId","answerData","target","value","filter","answer","accessToken","token","access_token","className","alwaysOpen","map","question","index","itemKey","content","questionType","optionList","option","type","name","label","optionName","onChange","queOptId","onBlur","min","max","step","lg","color","href","variant","onClick","answerDTOList","then","window","location","reload","useParams","xs","SurveyInfo","QuestionInfo","surInfo","console","log","htmlFor","sm","id","title","readOnly","plainText","categoryContent","description"],"sourceRoot":""}