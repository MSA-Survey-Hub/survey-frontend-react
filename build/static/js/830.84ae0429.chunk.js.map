{"version":3,"file":"static/js/830.84ae0429.chunk.js","mappings":"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","sources":["views/admin/CategoryList.js"],"sourcesContent":["import React, {useEffect} from 'react'\nimport { useState } from 'react'\nimport {\n  CAlert,\n  CButton,\n  CCard, CCardBody, CCardHeader,\n  CCol, CRow,\n  CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle,\n  CFormCheck, CFormInput,\n  CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow, CPaginationItem,\n  CPagination,\n} from '@coreui/react'\nimport apiConfig from \"../../lib/apiConfig\";\nimport axios from \"axios\";\nimport usePromise from \"../../lib/usePromise\";\n\nconst Tables = () => {\n  const current = decodeURI(window.location.href);\n  const search = current.split(\"?\")[1];\n  const params = new URLSearchParams(search);\n  const nowPage = params.get('page') ? params.get('page') : 1;\n\n  const [modalVisible, setModalVisible] = useState(false)\n  const [pageData, setPageData] = useState({\n    totalPage: 0,\n    page: 1,\n    size: 0,\n    start: 0,\n    end: 0,\n    prev: false,\n    next: false,\n    pageList: []\n  })\n  const [categoryList, setCategoryList] = useState([])\n\n  // const [loading, response, error] = usePromise(() => {\n  //   return axios.get(apiConfig.surveyCategoryList + \"?page=\" + nowPage)\n  // }, []);\n\n  useState(async () => {\n    await axios.get(apiConfig.surveyCategoryList + \"?page=\" + nowPage)\n      .then((response) => {\n        console.log(response.data)\n        setPageData(pageData => ({...pageData, ...response.data, page: nowPage}))\n        setCategoryList(response.data.dtoList)\n      })\n  })\n\n\n  const [checkedInputs, setCheckedInputs] = useState([])\n\n  const changeHandler = (checked, id) => {\n    if (checked) {\n      setCheckedInputs([...checkedInputs, id]);\n    } else {\n      // 체크 해제\n      setCheckedInputs(checkedInputs.filter((el) => el !== id));\n    }\n  };\n\n  const [categoryName, setCategoryName] = useState(\"\")\n  const registerCategory = () => {\n    axios.post(apiConfig.surveyCategoryRegister,\n      {content: categoryName},\n      {headers: { \"Content-Type\": \"application/json\" }\n      }).then((response) => {\n        setModalVisible(false)\n        setAlertColor(\"success\")\n        setAlertMessage(response.data)\n        setAlertVisible(true)\n      }).catch((error) => {\n      setModalVisible(false)\n      setAlertColor(\"danger\")\n      setAlertMessage(error.response.data)\n      setAlertVisible(true)\n    })\n  }\n\n  const [alertVisible, setAlertVisible] = useState(false)\n  const [alertColor, setAlertColor] = useState(\"\")\n  const [alertMessage, setAlertMessage] = useState(\"\")\n\n  const deleteCategory = () => {\n    axios.post(apiConfig.surveyCategoryDelete, JSON.stringify(checkedInputs),\n      {\n        headers: { \"Content-Type\": \"application/json\" }\n      }).then((response) => {\n          setAlertColor(\"success\")\n          setAlertMessage(response.data)\n          setAlertVisible(true)\n    }).catch((error) => {\n      console.log(error)\n      setAlertColor(\"danger\")\n      setAlertMessage(error.response.data)\n      setAlertVisible(true)\n    })\n  }\n\n\n\n  return (\n    <>\n      <CAlert\n        visible={alertVisible}\n        color={alertColor}\n        dismissible\n        onClose={() => setAlertVisible(false)}\n      >{alertMessage}</CAlert>\n      <CCardBody className=\"text-end\">\n        <CButton className=\"mb-3\" onClick={() => setModalVisible(!modalVisible)}>\n          Register\n        </CButton>\n      </CCardBody>\n      <CModal backdrop=\"static\" visible={modalVisible} onClose={() => setModalVisible(false)}>\n        <CModalHeader>\n          <CModalTitle>설문 카테고리 등록하기</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n            <CFormInput label=\"카테고리명\" name=\"content\" onChange= {(e) => {setCategoryName(e.target.value)}}></CFormInput>\n        </CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setModalVisible(false)}>\n            Cancel\n          </CButton>\n          <CButton color=\"primary\" onClick={registerCategory}>Register</CButton>\n        </CModalFooter>\n      </CModal>\n      <CRow>\n        <CCol xs={12}>\n          <code></code>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>설문 카테고리 리스트</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CTable>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">삭제</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">카테고리명</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">카테고리 등록 날짜</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {categoryList.map((category) => (\n                    <CTableRow key={category}>\n                      <CTableDataCell>\n                        <CFormCheck\n                          id={category.surCatId}\n                          onChange={(e)=>{changeHandler(e.currentTarget.checked, category.surCatId)}}\n                                    checked={checkedInputs.includes(category.surCatId) ? true : false}/>\n                      </CTableDataCell>\n                      <CTableHeaderCell scope=\"row\">{category.surCatId}</CTableHeaderCell>\n                      <CTableDataCell>{category.content}</CTableDataCell>\n                      <CTableDataCell>{category.regDt}</CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n              <CButton color=\"danger\" onClick={deleteCategory}>Delete</CButton>\n            </CCardBody>\n          </CCard>\n\n          <CPagination aria-label=\"Page navigation example\" align=\"center\">\n            {pageData.prev ? (\n              <CPaginationItem aria-label=\"Previous\">\n            <span aria-hidden=\"true\">\n              <a href={\"/#/category/category_list?page=\" + String(parseInt(pageData.start) - 1)}>&laquo;</a>\n            </span>\n              </CPaginationItem>\n            ) : (\n              <CPaginationItem aria-label=\"Previous\" disabled>\n                <span aria-hidden=\"true\">&laquo;</span>\n              </CPaginationItem>\n            )}\n            {pageData.pageList.map((idx) =>\n              idx === parseInt(pageData.page) ? (\n                <CPaginationItem active key={idx}>{pageData.page}</CPaginationItem>\n              ) : (\n                <CPaginationItem key={idx}>\n                  <a href={\"/#/category/category_list?page=\" + idx}>{idx}</a>\n                </CPaginationItem>\n              ),\n            )}\n            {pageData.next ? (\n              <CPaginationItem aria-label=\"Next\">\n            <span aria-hidden=\"true\">\n              <a href={\"/#/category/category_list?page=\" + String(parseInt(pageData.end) + 1)}>&raquo;</a>\n            </span>\n              </CPaginationItem>\n            ) : (\n              <CPaginationItem aria-label=\"Next\" disabled>\n                <span aria-hidden=\"true\">&raquo;</span>\n              </CPaginationItem>\n            )}\n          </CPagination>\n\n\n\n\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Tables\n"],"names":["search","decodeURI","window","location","href","split","params","URLSearchParams","nowPage","get","useState","modalVisible","setModalVisible","totalPage","page","size","start","end","prev","next","pageList","pageData","setPageData","categoryList","setCategoryList","axios","apiConfig","then","response","console","log","data","dtoList","checkedInputs","setCheckedInputs","categoryName","setCategoryName","alertVisible","setAlertVisible","alertColor","setAlertColor","alertMessage","setAlertMessage","visible","color","dismissible","onClose","className","onClick","backdrop","label","name","onChange","e","target","value","content","headers","catch","error","xs","scope","map","category","id","surCatId","checked","currentTarget","filter","el","includes","regDt","JSON","stringify","align","String","parseInt","disabled","idx","active"],"sourceRoot":""}