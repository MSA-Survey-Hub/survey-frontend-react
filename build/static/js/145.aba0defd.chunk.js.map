{"version":3,"file":"static/js/145.aba0defd.chunk.js","mappings":"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","sources":["views/survey/detail/RegisterAnswer.js","views/survey/detail/info/QuestionInfo.js","views/survey/detail/info/SurveyInfo.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CRow, CCol,\n} from \"@coreui/react\";\nimport SurveyInfo from \"./info/SurveyInfo\";\nimport QuestionInfo from \"./info/QuestionInfo\";\nimport { useParams } from 'react-router-dom'; \n\nimport axios from \"axios\";\nimport apiConfig from \"../../../lib/apiConfig\";\nimport usePromise from \"../../../lib/usePromise\";\n\nconst RegisterAnswer = () => {\n  const params = useParams();\n  let surId = params.sur_id;\n\n  let surInfo = null;\n  let questionList = []\n  const [loading, response, error] = usePromise(() => {\n    return axios.post(apiConfig.surveyDetail,\n      {sur_id: surId},\n      {headers: { 'Content-Type': 'multipart/form-data'}}\n    )\n  }, []);\n\n  if(response != null){\n    surInfo = response.data.info;\n    questionList = response.data.question_list\n  }\n  \n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong> 설문 참여 </strong>\n            <small> 설문에 참여 할 수 있습니다.</small>\n          </CCardHeader>\n          <CCardBody>\n            <div>\n            <SurveyInfo surInfo={surInfo}/>\n            <QuestionInfo surId={surId} questionList={questionList}/>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\nexport default RegisterAnswer\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  CCol,\n  CButton,\n  CFormInput,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n  CFormCheck,\n  CFormTextarea, CFormRange,\n} from '@coreui/react'\nimport axios from \"axios\";\nimport apiConfig from \"../../../../lib/apiConfig\";\nimport usePromise from \"../../../../lib/usePromise\";\n\nconst DetailInfo = ({surId, questionList}) => {\n  const { user } = useSelector(({user})=> ({user:user.user}));\n  const userId = user.info.userId;\n\n  const [answerList, setAnswerList] = useState([])\n\n\n  const makeAnswer = (e, queId) => {\n    const answerData = {\n      \"queId\": queId,\n      \"type\": 0,\n      \"content\": e.target.value,\n      \"regId\": userId\n    }\n    setAnswerList(answerList.filter(answer => answer.queId !== queId));\n    setAnswerList(answerList=>[...answerList, answerData])\n  }\n\n  const accessToken = user.token.access_token;\n  const sendAnswer = () => {\n    axios.post(apiConfig.answerRegister,\n      {\n        surId: surId,\n        answerDTOList: answerList\n      })\n      .then((response) => {\n        window.location.reload(`/#/survey/detail/${surId}`,{headers: {'Authorization': 'Bearer ' + accessToken }});\n      })\n  }\n\n\n  return (\n    <div className=\"mt-3\">\n        <CAccordion alwaysOpen>\n          {questionList.map((question, index) => (\n            <CAccordionItem itemKey={index+1} key={question.queId}>\n              <CAccordionHeader>{index+1}. {question.content} </CAccordionHeader>\n              <CAccordionBody>\n                {question.questionType === \"YN\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)}/>\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumOnly\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"radio\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)} />\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"NumMul\" && (\n                  <>\n                    {question.optionList.map((option) => (\n                      <CFormCheck type=\"checkbox\"\n                                  name={question.queId}\n                                  key={option.queOptId}\n                                  label={option.optionName}\n                                  value={option.optionName}\n                                  onChange={(e) => makeAnswer(e,question.queId)}/>\n                    ))}\n                  </>\n                )}\n\n                {question.questionType === \"Sub\" && (\n                  <CFormTextarea name=\"content\" onBlur={(e) => makeAnswer(e,question.queId)}></CFormTextarea>\n                )}\n\n                {question.questionType == \"Grd\" && (\n                  <CFormRange name=\"content\" min=\"0\" max=\"100\" step=\"10\" onChange={(e) => makeAnswer(e,question.queId)}/>\n                )}\n              </CAccordionBody>\n            </CAccordionItem>\n          ))}\n        </CAccordion>\n      <CCol lg={12} className=\"text-start d-flex mt-1\">\n        <CButton color=\"primary\" href=\"#\" className=\"ms-auto\" variant=\"outline\" onClick={sendAnswer}>\n          send\n        </CButton>\n      </CCol>\n    </div>\n  )\n}\n\nexport default DetailInfo\n","import React, { useState } from 'react'\nimport {\n  CFormLabel,\n  CFormInput,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport moment from 'moment';\n\nconst SurveyInfo = ({surInfo}) => {\n  console.log(surInfo);\n\n  return (\n    <div>\n        <CRow>\n            <CFormLabel htmlFor=\"surveyName\" className=\"col-sm-2 col-form-label\">\n            설문명\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"surveyName\"\n                value={surInfo? surInfo.title:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n            <CFormLabel htmlFor=\"category\" className=\"col-sm-2 col-form-label\">\n            카테고리\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"category\"\n                value={surInfo? surInfo.categoryContent:null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n        <CRow>\n          <CFormLabel htmlFor=\"description\" className=\"col-sm-2 col-form-label\">\n            설문설명\n          </CFormLabel>\n          <CCol sm={10}>\n            <CFormInput\n              type=\"text\"\n              id=\"description\"\n              value={surInfo? surInfo.description:null}\n              readOnly\n              plainText\n            />\n          </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"publicYn\" className=\"col-sm-2 col-form-label\">\n            공개여부\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"publicYn\"\n                value={surInfo? (surInfo.isPrivateYn==\"Y\"? \"대상자 공개\" : \"전체 공개\") :null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"regDt\" className=\"col-sm-2 col-form-label\">\n            등록일\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"regDt\"\n                value={surInfo ? moment(new Date(surInfo.regDt)).format('YYYY-MM-DD'):null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"regDt\" className=\"col-sm-2 col-form-label\">\n            마감일\n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"regDt\"\n                value={surInfo ?moment(new Date(surInfo.dueDt)).format('YYYY-MM-DD'):null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n        <CRow>\n            <CFormLabel htmlFor=\"regId\" className=\"col-sm-2 col-form-label\">\n            설문 등록자 \n            </CFormLabel>\n            <CCol sm={10}>\n            <CFormInput\n                type=\"text\"\n                id=\"regId\"\n                value={surInfo? surInfo.regId : null}\n                readOnly\n                plainText\n                />\n            </CCol>\n        </CRow>\n\n\n\n    </div>\n  )\n}\n\nexport default SurveyInfo\n"],"names":["surId","useParams","sur_id","surInfo","questionList","usePromise","axios","apiConfig","headers","response","data","info","question_list","xs","className","user","useSelector","userId","useState","answerList","setAnswerList","makeAnswer","e","queId","answerData","target","value","filter","answer","accessToken","token","access_token","alwaysOpen","map","question","index","itemKey","content","questionType","optionList","option","type","name","label","optionName","onChange","queOptId","onBlur","min","max","step","lg","color","href","variant","onClick","answerDTOList","then","window","location","reload","console","log","htmlFor","sm","id","title","readOnly","plainText","categoryContent","description","isPrivateYn","moment","Date","regDt","format","dueDt","regId"],"sourceRoot":""}